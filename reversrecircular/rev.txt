#include <stdio.h>
#include <stdlib.h>

// Define the node structure
struct Node {
    int data;
    struct Node* next;
};

// Function to add a node at the end of the circular linked list
void append(struct Node** head_ref, int data) {
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
    struct Node* last = *head_ref;
    new_node->data = data;
    new_node->next = *head_ref;

    if (*head_ref == NULL) {
        *head_ref = new_node;
        new_node->next = *head_ref;
    } else {
        while (last->next != *head_ref)
            last = last->next;
        last->next = new_node;
    }
}

// Function to reverse the circular linked list iteratively
void reverse(struct Node** head_ref) {
    struct Node* prev = NULL;
    struct Node* curr = *head_ref;
    struct Node* next;
    struct Node* last = *head_ref;

    // Find the last node to make circular links later
    while (last->next != *head_ref)
        last = last->next;

    do {
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
    } while (curr != *head_ref);

    (*head_ref)->next = prev;
    *head_ref = prev;
    last->next = *head_ref; // Re-establish circularity
}

// Function to print the circular linked list
void printList(struct Node* head) {
    struct Node* temp = head;
    if (head != NULL) {
        do {
            printf("%d ", temp->data);
            temp = temp->next;
        } while (temp != head);
        printf("\n");
    }
}

int main() {
    struct Node* head = NULL;

    append(&head, 10);
    append(&head, 20);
    append(&head, 30);
    append(&head, 40);

    printf("Original Circular Linked List:\n");
    printList(head);

    reverse(&head);

    printf("Reversed Circular Linked List:\n");
    printList(head);

    return 0;
}
